#! /usr/bin/python

import os, sys

projname = sys.argv[1]

# create the deployment repo
deploydir = "/var/vsites/" + projname

if os.path.exists(deploydir):
    os.system("/bin/rm -rf %s" % deploydir)

os.system("mkdir %s" % deploydir)
os.system("cd %s ; git init" % deploydir)

# create the hub repo
hubdir = "/prod/" + projname + ".git"

if os.path.exists(hubdir):
    os.system("/bin/rm -rf %s" % hubdir)

os.system("mkdir %s" % hubdir)
os.system("cd %s ; git init --bare"  % hubdir)

#set hub as a remote for the deployment repo
os.system("cd %s ; git remote add hub %s" % (deploydir, hubdir))
print("added %s as remote repo 'hub' in %s" % (hubdir, deploydir))

# install the post-update hook to cause deployment repo to automatically
# pull any changes committed to hub repo
f = open("%s/hooks/post-update" % hubdir, "w")
f.write("""\
#!/usr/bin/python

import os

print ""
print "**** Deploying updates to %(DEPLOYDIR)s ****"
print ""

if os.path.exists("%(DEPLOYDIR)s"):
    os.system("unset GIT_DIR ; cd %(DEPLOYDIR)s ; git pull hub master")
    os.system("unset GIT_DIR ; cd %(DEPLOYDIR)s ; git update-server-info")

if os.path.exists("/var/vsites/conf/%(SITENAME)s-site.conf"):
    os.system("/bin/rm -f /var/vsites/conf/%(SITENAME)s-site.conf")

if os.path.exists("%(DEPLOYDIR)s/site.conf") and os.path.exists("/var/vsites/conf"):
    os.system("ln -s %(DEPLOYDIR)s/site.conf /var/vsites/conf/%(SITENAME)s-site.conf")

"""
% { 'DEPLOYDIR' : deploydir,
    'SITENAME'  : projname })
f.close()
os.system("chmod +x %s/hooks/post-update" % hubdir)
print "created %s/hooks/post-update" % hubdir
