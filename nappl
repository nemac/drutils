#! /usr/bin/python

import sys
sys.path.append(".") # this line gets replaced by `make install`

import re, os, optparse, shutil, json

from Nappl import *
from NapplMeta import *
from Container import *
from ApacheContainer import *
from DrupalContainer import *

def missing_container_name_error():
    print "error: CONTAINER_NAME argument is missing"
    sys.exit(-1)

if __name__ == "__main__":
    #
    # Process the arguments
    #
    parser = optparse.OptionParser('nappl [options] CONTAINER_NAME')
    parser.add_option('--create-container',
                      help='create an application container',
                      dest='createContainer', default=False, action='store_true')
    parser.add_option('--delete-container',
                      help='delete an application container',
                      dest='deleteContainer', default=False, action='store_true')
    parser.add_option('--make-deployable',
                      help='make a container be deployable, by setting up a git repo at /deploy/APPNAME.git',
                      dest='makeDeployable', default=False, action='store_true')
    parser.add_option('--type',
                      help='with --create-container, create a container for an application of'
                      + ' the given TYPE; allowed types are: "drupal"',
                      dest='type', type='string')
    parser.add_option('--dbname',
                      help='with --create-container, create a database named NAME, instead of'
                        + ' inferring it from the application name',
                      dest='dbname', type='string', metavar='NAME')
    parser.add_option('--init',
                      help='with --create-container, initialize a new application in the container by downloading the latest version of Drupal',
                      dest='init', default=False, action='store_true')
    parser.add_option('--import-drutils-dump',
                      help="with --create-container, initialize a new application in the container by loading from a DUMPFILE written by drutils's `dumpsite` command",
                      dest='importDrutilsDump', type='string', metavar='DUMPFILE')
    #parser.add_option('--install',
    #                  help='install a project',
    #                  dest='install', default=False, action='store_true')
    parser.add_option('--list-containers',
                      help='list all application containers present',
                      dest='listContainers', default=False, action='store_true')
    parser.add_option('--dump-db',
                      help='write a database dump file of the application into the /dumps dir',
                      dest='dumpDb', default=False, action='store_true')
    parser.add_option('--load-db',
                      help="load a database DUMPFILE into the container's database",
                      dest='loadDb', type='string', metavar='DUMPFILE')
    parser.add_option('--dump-files',
                      help="write a compressed tar backup of application's files into the /dumps dir",
                      dest='dumpFiles', default=False, action='store_true')
    parser.add_option('--load-files',
                      help="load a compressed tar DUMPFILE of the application's files",
                      dest='loadFiles', type='string', metavar='DUMPFILE')
    parser.add_option('--dump-all',
                      help='write both a database dump and a files dump of a Drupal application into the /dumps dir',
                      dest='dumpAll', default=False, action='store_true')
    parser.add_option('--dump-local',
                      help='causes --dump-db, --dump-files, or --dump-all to write dump file(s) into current dir instead of /dumps dir',
                      dest='dumpLocal', default=False, action='store_true')
    parser.add_option('--import-code',
                      help="with --create-container, initialize a new application in the container by cloning a git REPO into the container's `project` subdir; requires --load-db, also works with --load-files",
                      dest='importCode', type='string', metavar='REPO')
    (opts, args) = parser.parse_args()



    if opts.createContainer:
        if len(args) < 1:
            missing_container_name_error()
        appName = args[0]
        if opts.type == "drupal":
            c = DrupalContainer(appName)
        elif opts.type == "apache":
            c = ApacheContainer(appName)
        else:
            raise Exception("unknown container type: %s" % opts.type)
        c.create()
        if opts.init:
            c.init()
        elif opts.importDrutilsDump:
            c.import_drutils_dump(opts.importDrutilsDump)
        elif opts.importCode:
            if not opts.loadDb:
                raise Exception("--load-db must be specified along with --import-code")
            c.import_code(opts.importCode, opts.loadDb, opts.loadFiles)

    elif opts.deleteContainer:
        if len(args) < 1:
            missing_container_name_error()
        appName = args[0]
        c = Container.load(appName)
        c.delete()

    elif opts.dumpDb:
        if len(args) < 1:
            missing_container_name_error()
        appName = args[0]
        c = Container.load(appName)
        if not c.git_wd_clean():
            print ("The application in container %s has edits which"
                   + " have not been commited to its git repo." ) % appName
            response = raw_input("Do you really want to create a database dump [N|y]? ")
            if response != 'y':
                print "No dump created."
                sys.exit(0)
        if opts.dumpLocal:
            c.dump_db(dumpdir=".")
        else:
            c.dump_db()

    elif opts.loadDb:
        if len(args) < 1:
            missing_container_name_error()
        appName = args[0]
        c = Container.load(appName)
        c.load_db(opts.loadDb)

    elif opts.dumpFiles:
        if len(args) < 1:
            missing_container_name_error()
        appName = args[0]
        c = Container.load(appName)
        if not c.git_wd_clean():
            print ("The application in container %s has edits which"
                   + " have not been commited to its git repo." ) % appName
            response = raw_input("Do you really want to create a files archive [N|y]? ")
            if response != 'y':
                print "No archive created."
                sys.exit(0)
        if opts.dumpLocal:
            c.dump_files(dumpdir=".")
        else:
            c.dump_files()


    elif opts.loadFiles:
        if len(args) < 1:
            missing_container_name_error()
        appName = args[0]
        c = Container.load(appName)
        c.load_files(opts.loadFiles)

    elif opts.dumpAll:
        if len(args) < 1:
            missing_container_name_error()
        appName = args[0]
        c = Container.load(appName)
        if not c.git_wd_clean():
            print ("The application in container %s has edits which"
                   + " have not been commited to its git repo." ) % appName
            response = raw_input("Do you really want to create the dumps [N|y]? ")
            if response != 'y':
                print "No dumps created."
                sys.exit(0)
        if opts.dumpLocal:
            c.dump_all(dumpdir=".")
        else:
            c.dump_all()

    #elif opts.install:
    #    if len(args) < 1:
    #       missing_container_name_error()
    #    appName = args[0]
    #    c = Container.load(appName)
    #    c.install()

    elif opts.listContainers:
        apps = Container.list_containers()
        format = "%-40s  %-10s  %-10s  %-40s  %s"
        print format % (
            "Application Name",
            "Type",
            "Occupancy",
            "Directory",
            "Deploy Repo",
            )
        print format % (
            "----------------",
            "----",
            "---------",
            "---------",
            "-----------"
            )
        for app in apps:
            print format % (
                app['container']['name'],
                app['container']['type'],
                "OCCUPIED" if os.path.exists(app['container']['location']) else "VACANT",
                app['container']['location'],
                app['container']['deployrepo'] if 'deployrepo' in app['container'] else ""
                )

    elif opts.makeDeployable:
        appName = args[0]
        c = Container.load(appName)
        c.makeDeployable()

    else:
        parser.print_help()
        sys.exit(-1)

