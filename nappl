#! /usr/bin/python

sys.path.append(".") # this line gets replaced by `make install`

import nappl, sys, re, os, optparse, shutil, json

if __name__ == "__main__":
    #
    # Process the arguments
    #
    parser = optparse.OptionParser('nappl [options] APPLICATION_NAME')
    parser.add_option('--create-container',
                      help='create an application container',
                      dest='createContainer', default='False', action='store_true')
    parser.add_option('--delete-container',
                      help='delete an application container',
                      dest='deleteContainer', default='False', action='store_true')
    parser.add_option('--type',
                      help='with --create, create a container for an application of'
                      + ' the given TYPE; allowed types are: "drupal"',
                      dest='type', type='string')
    parser.add_option('--dbname',
                      help='with --create, create a database named NAME, instead of'
                        + ' inferring it from the application name',
                      dest='dbname', type='string', metavar='NAME')
    parser.add_option('--init',
                      help='initialize a new application in the container',
                      dest='init', default='False', action='store_true')
    parser.add_option('--clone',
                      help='populate the container with a project by cloning the given git REPO',
                      dest='clone', type='string', metavar='REPO')
    parser.add_option('--install',
                      help='install a project',
                      dest='install', default='False', action='store_true')
    parser.add_option('--list-containers',
                      help='list all application containers present',
                      dest='listContainers', default='False', action='store_true')
    (opts, args) = parser.parse_args()



    if opts.createContainer is True:
        appName = args[0]
        if opts.type == "drupal":
            c = nappl.DrupalContainer(appName)
            c.create()
            if opts.init is True:
                c.init()

    elif opts.deleteContainer is True:
        appName = args[0]
        c = nappl.DrupalContainer(appName)
        c.delete()

    elif opts.listContainers is True:
        apps = nappl.Container.list_containers()
        format = "%-40s  %-10s  %-10s  %s"
        print format % (
            "Application Name",
            "Type",
            "Occupancy",
            "Directory"
            )
        print format % (
            "----------------",
            "----",
            "---------",
            "---------"
            )
        for app in apps:
            print format % (
                app['application']['name'],
                app['application']['type'],
                "OCCUPIED" if os.path.exists(app['application']['location']) else "VACANT",
                app['application']['location']
                )
